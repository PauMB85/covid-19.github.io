{"version":3,"sources":["config/Axios.js","service/ApiService.js","components/summary/Summary.js","components/charts/ChartsEVO.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","interceptors","response","use","data","fetchGlobalData","a","API","get","globalEvolution","Summary","summary","infected","recovered","deaths","isLoading","className","Grid","container","justify","item","xs","md","component","Card","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","ChartsEVO","chartConfig","useState","setData","useEffect","console","log","dataCharts","labelsCharts","dataSets","map","dataChart","creatSet","datasets","labels","createChartObject","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","App","summaryData","setSummaryData","chartConf","setChartConf","fetchGlobal","addDataSummary","evolutionGlobal","createObjectChartGlobal","dataDeaths","dataRecovered","dataInfected","dates","forEach","element","push","total","totalRecovered","totalConfirmed","confirmed","reportDate","date","value","Container","Paper","square","Link","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a336c5e.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://covid19.mathdro.id/api'\n});\n\ninstance.interceptors.response.use(response => {\n    return !!(response.data)? response.data : response;\n});\n\nexport default instance;","import API from './../config/Axios';\nimport axios from 'axios';\n\n\nexport const fetchGlobalData = async () => {\n    try {\n        return await API.get();\n    } catch(error) {\n        return error;\n    }\n}\n\nexport const fetchCountriesData = async () => {\n    try {\n        return await API.get('/countries');\n    } catch(error) {\n        return error;\n    }\n}\n\nexport const globalEvolution = async () => {\n    try {\n        return await API.get('/daily');\n    } catch (error) {\n        return error;\n    }\n}\n\nexport const fetchDataByCountry = async (country) => {\n    try {\n        const { data } = await axios.get('https://pomber.github.io/covid19/timeseries.json');\n        return data[country];\n    } catch (error) {\n        return error;\n    }\n}\n\n","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\n\nimport './Summary.scss';\n\nfunction Summary( {summary :{infected, recovered, deaths, isLoading}}) {\n    return (\n        <div className=\"Summary\">\n            <h1 className=\"Summary--title\" >Summary in the world</h1>\n            <div className=\"Summary--cards\">\n                <Grid container justify=\"space-between\">\n                    <Grid item xs={12} md={3} component={Card} className=\"card card--recovered\">\n                        <CardContent>\n                            <Typography color=\"textSecondary\" gutterBottom>\n                                Recovered\n                            </Typography>\n                            <Typography variant=\"h5\" component=\"h2\">\n                            <CountUp start={0} end={isLoading? 0 : recovered} duration={2} separator=\",\" />\n                            </Typography>\n                            <Typography variant=\"body2\" component=\"p\">\n                                Number of recoveries by COVID-19.\n                            </Typography>\n                        </CardContent>\n                    </Grid>\n                    <Grid item xs={12} md={3} component={Card} className=\"card card--infected\">\n                        <CardContent>\n                            <Typography color=\"textSecondary\" gutterBottom>\n                                Infected\n                            </Typography>\n                            <Typography variant=\"h5\" component=\"h2\">\n                            <CountUp start={0} end={isLoading? 0 : infected} duration={2} separator=\",\" />\n                            </Typography>\n                            <Typography variant=\"body2\" component=\"p\">\n                                Number of infected by COVID-19.\n                            </Typography>\n                        </CardContent>\n                    </Grid>\n                    <Grid item xs={12} md={3} component={Card} className=\"card card--deaths\">\n                        <CardContent>\n                            <Typography color=\"textSecondary\" gutterBottom>\n                                Deaths\n                            </Typography>\n                            <Typography variant=\"h5\" component=\"h2\">\n                            <CountUp start={0} end={isLoading? 0 : deaths} duration={2} separator=\",\" />\n                            </Typography>\n                            <Typography variant=\"body2\" component=\"p\">\n                                Number of deaths by COVID-19.\n                            </Typography>\n                        </CardContent>\n                    </Grid>\n                </Grid>\n            </div>\n        </div>\n    );\n}\n\nexport default Summary;","import React, { useEffect, useState } from 'react';\nimport {Line} from 'react-chartjs-2';\n\nfunction ChartsEVO ( {chartConfig } ) {\n\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n\n        const createChartObject = () => {\n            const { dataCharts } = chartConfig ;\n            const { labelsCharts } = chartConfig ;\n            const dataSets = dataCharts.map(dataChart => creatSet(dataChart));\n            setData({\n                datasets: dataSets,\n                labels: labelsCharts\n            });\n        }\n\n        console.log('los datos que recibimos son: ', chartConfig);\n        createChartObject();\n        \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const creatSet = ({ label, color, data }) => {\n        return {\n            label: label ,\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: color ,\n            borderColor: color ,\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: { color },\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: color ,\n            pointHoverBorderColor: color ,\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: data \n        }\n    }\n\n    return (\n        <div>\n            <Line data={data} />\n        </div>\n    );\n}\n\nexport default ChartsEVO;","import React, { useEffect, useState } from 'react';\nimport { fetchGlobalData, globalEvolution } from './service/ApiService';\nimport './App.scss';\nimport Summary from './components/summary/Summary';\nimport { Container, Paper, Link } from '@material-ui/core';\nimport ChartsEVO from './components/charts/ChartsEVO';\n\nfunction App() {\n\n  const [summaryData, setSummaryData] = useState({isLoading: true});\n  const [chartConf, setChartConf] = useState();\n\n  useEffect(() => {\n\n    const fetchGlobal = async () => {\n      const data = await fetchGlobalData();\n      addDataSummary(data);\n    } \n\n    const evolutionGlobal = async () => {\n      const data = await globalEvolution();\n      createObjectChartGlobal(data);\n    }\n\n    fetchGlobal();\n    evolutionGlobal();\n    \n  }, []);\n\n  const createObjectChartGlobal = (data) => {\n    console.log('al crear chart data', data);\n    const dataDeaths = [];\n    const dataRecovered = [];\n    const dataInfected = [];\n    const dates = [];\n    data.forEach(element => {\n      dataDeaths.push((element.deaths.total)? element.deaths.total : element.deaths );\n      dataRecovered.push((element.totalRecovered)? element.totalRecovered : element.recovered);\n      dataInfected.push((element.totalConfirmed)? element.totalConfirmed : element.confirmed);\n      dates.push((element.reportDate)? element.reportDate : element.date);\n    });\n\n    const recovered = {\n      label: 'Recovered',\n      color: 'rgba(0, 255, 0, 0.25)',\n      data: dataRecovered\n    };\n\n    const infected = {\n      label: 'Infected',\n      color: 'rgba(255, 0, 0, 0.25)',\n      data: dataInfected\n    };\n\n    const deaths = {\n      label: 'Deaths',\n      color: 'rgba(0, 0, 0, 0.5)',\n      data: dataDeaths\n    };\n\n    setChartConf( { dataCharts: [recovered, infected, deaths], labelsCharts: dates} );\n  }\n\n  const addDataSummary = (data) => {\n    setSummaryData({\n      infected: data.confirmed.value,\n      recovered: data.recovered.value,\n      deaths: data.deaths.value,\n      isLoading:false\n    });\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App--header\">\n        <h1>COVID - 19</h1>\n      </header>\n      <main className=\"App--main\">\n        <Container className=\"App--main__conteiner\">\n          <div className=\"App--main__conteiner--elements\" >\n            <Summary summary={summaryData} />\n            {chartConf? <ChartsEVO chartConfig={ chartConf } />  : null }\n          </div>\n        </Container>\n      </main>\n      <footer className=\"App--footer\">\n        <Paper className=\"paper\" variant=\"outlined\" square>\n          <div className=\"flex-column\">\n            <div className=\"social\">\n              \n            </div>\n            <div className=\"rights\">&copy; Pau Maravi Busquets - v0.1</div>\n            <div className=\"rights\">\n              All the data is from <Link href=\"https://github.com/mathdroid/covid-19-api\" target=\"_blank\" rel=\"noreferrer\" >Mathdro</Link>\n            </div>\n          </div>\n        </Paper>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}